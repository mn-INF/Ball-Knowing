SQL Procedures (Callable functions that we can use for further querying) on the SHAQ database

1. Rosterstats
- Displays the key stats of every player on a team's roster for a given team_name, season, and season_type.

```
CREATE OR REPLACE FUNCTION RosterStats(
team_name VARCHAR(100), 
season INT,
season_type INT
)
RETURNS TABLE (szn INT, szn_description VARCHAR(55), 
player_first_name VARCHAR(255), player_last_name VARCHAR(255), full_team_name VARCHAR(100),
ppg DECIMAL, apg DECIMAL, rpg DECIMAL)
AS $$
BEGIN
    RETURN QUERY SELECT season_id, description, first_name, last_name, full_name,
ROUND(pts*1.0/games_played, 2) as ppg,
ROUND(ast*1.0/games_played, 2) as apg,
ROUND(trb*1.0/games_played, 2) as rpg
FROM player_season_stat_totals as psst
JOIN players as pl ON psst.player_id = pl.player_id
JOIN season_types as st ON psst.season_type_id = st.season_type_id
JOIN teams on psst.team_id = teams.team_id
WHERE psst.season_type_id = season_type AND full_name = team_name AND season_id = season
ORDER BY description DESC;
END; 
$$ LANGUAGE plpgsql;
```

Sample calls:

```
SELECT * FROM RosterStats('Boston Celtics', 2017, 1);
SELECT * FROM RosterStats('Detroit Pistons', 2006, 0);
SELECT * FROM RosterStats('Cleveland Cavaliers', 2015, 1);
```

2. Top N's (PPG, APG, RPG, regular season)
- Takes the aggregation queries and stores them as procedures

PPG (for a given season and a specified player_limit):

```
CREATE OR REPLACE FUNCTION PPGRank( 
season INT,
player_limit INT
)
RETURNS TABLE (szn INT, player_first_name VARCHAR(255), player_last_name VARCHAR(255), 
full_team_name VARCHAR(100), ppg DECIMAL)
AS $$
BEGIN
    RETURN QUERY SELECT season_id, first_name, 
	last_name, full_name, 
ROUND(SUM(pts*1.0/games_played), 1) as ppg
FROM player_season_stat_totals as psst
JOIN players as pl ON psst.player_id = pl.player_id
JOIN teams on psst.team_id = teams.team_id
WHERE season_type_id = 0 AND season_id = season AND games_played >= 58
GROUP BY season_id, first_name, last_name, full_name
ORDER BY SUM(pts*1.0/games_played) DESC
LIMIT player_limit;
END; 
$$ LANGUAGE plpgsql;
```

Sample call:

```
SELECT * FROM PPGRank(2012, 10)
```

APG (for a given season and a specified player_limit):

```
CREATE OR REPLACE FUNCTION APGRank( 
season INT,
player_limit INT
)
RETURNS TABLE (szn INT, player_first_name VARCHAR(255), player_last_name VARCHAR(255), 
full_team_name VARCHAR(100), apg DECIMAL)
AS $$
BEGIN
    RETURN QUERY SELECT season_id, first_name, 
	last_name, full_name, 
ROUND(SUM(ast*1.0/games_played), 1) as apg
FROM player_season_stat_totals as psst
JOIN players as pl ON psst.player_id = pl.player_id
JOIN teams on psst.team_id = teams.team_id
WHERE season_type_id = 0 AND season_id = season AND games_played >= 58
GROUP BY season_id, first_name, last_name, full_name
ORDER BY SUM(ast*1.0/games_played) DESC
LIMIT player_limit;
END; 
$$ LANGUAGE plpgsql;
```

Sample Call:

```
SELECT * FROM APGRank(2019, 5)
```

RPG (for a given season and a specified player_limit):

```
CREATE OR REPLACE FUNCTION RPGRank( 
season INT,
player_limit INT
)
RETURNS TABLE (szn INT, player_first_name VARCHAR(255), player_last_name VARCHAR(255), 
full_team_name VARCHAR(100), rpg DECIMAL)
AS $$
BEGIN
    RETURN QUERY SELECT season_id, first_name, 
	last_name, full_name, 
ROUND(SUM(trb*1.0/games_played), 1) as rpg
FROM player_season_stat_totals as psst
JOIN players as pl ON psst.player_id = pl.player_id
JOIN teams on psst.team_id = teams.team_id
WHERE season_type_id = 0 AND season_id = season AND games_played >= 58
GROUP BY season_id, first_name, last_name, full_name
ORDER BY SUM(trb*1.0/games_played) DESC
LIMIT player_limit;
END; 
$$ LANGUAGE plpgsql;
```

Sample Call:

```
SELECT * FROM RPGRank (2008, 3)
```
